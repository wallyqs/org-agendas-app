#+TITLE:   Database schema
#+OPTIONS: loadenv:t
#+runmode: idempotent
#+include: "org/environment.org"
#+include: "org/app.org"

*** Create the Database

If we cannot connect to the database, we first interpret it as
the database has not been created yet and try to create it once.
This would be done mostly development environment.

#+name: database-created
#+begin_src ruby :dir .
  $LOAD_PATH << File.dirname(__FILE__)
  begin
    require 'lib/db/connection'

    puts
    puts "Database lives at #{ENV['DATABASE_URI']}"
    puts
    puts "--- Current tables ---"
    puts DB.tables
    puts
  rescue
    exit 1
  end
#+end_src

#+name: create-database
#+begin_src ruby :dir . :unless database-created
$LOAD_PATH << File.dirname(__FILE__)
require 'lib/environment'

DB = Sequel.connect({
  :host         => DATABASE_URI.host,
  :port         => DATABASE_URI.port,
  :user         => DATABASE_URI.user,
  :password     => DATABASE_URI.password,
  :adapter      => DATABASE_URI.scheme
})

sql = "create database #{DATABASE_URI.path[1..-1]};" 
puts  "Executing: '#{sql}'"
DB.run sql
#+end_src

*** Migrations

#+name: create-agendas
#+begin_src ruby :dir . :results output
$LOAD_PATH << File.dirname(__FILE__)
require 'lib/db/connection'

DB.create_table :agendas do
  primary_key :id
  String      :title
  Text        :content
  String      :name
end unless DB.tables.include?(:agendas)
#+end_src
